<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.art1001.supply.mapper.resource.ResourceMapper">
	
	<!--mybatis ehcache缓存配置,以下两个<cache>标签二选一,第一个可以输出日志,第二个不输出日志 -->
	 
	<!--<cache type="org.mybatis.caches.ehcache.LoggingEhcache"/> -->
	 
	<!-- <cache type="org.mybatis.caches.ehcache.EhcacheCache"/> -->

	<sql id="resourceAttributes">
		s_id,
		s_parent_id,
		s_name,
		s_source_key,
		s_type,
		s_source_url,
		s_level,
		s_is_hide,
		s_description,
		s_create_time,
		s_update_time
	</sql>

	<sql id="resourceAttributes2">
		r1.s_id,
		r1.s_parent_id,
		r1.s_name,
		r1.s_source_key,
		r1.s_type,
		r1.s_source_url,
		r1.s_level,
		r1.s_is_hide,
		r1.s_description,
		r1.s_create_time,
		r1.s_update_time,
		r2.s_id as r2_id,
		r2.s_parent_id,
		r2.s_name,
		r2.s_source_key,
		r2.s_type,
		r2.s_source_url,
		r2.s_level,
		r2.s_is_hide,
		r2.s_description,
		r2.s_create_time,
		r2.s_update_time
	</sql>

	<resultMap id="resourceMap" type="com.art1001.supply.entity.resource.ResourceEntity">
		<id property="resourceId" column="s_id"/>
		<result property="parentId" column="s_parent_id"/>
		<result property="resourceName" column="s_name"/>
		<result property="resourceKey" column="s_source_key"/>
		<result property="resourceType" column="s_type"/>
		<result property="resourceUrl" column="s_source_url"/>
		<result property="resourceLevel" column="s_level"/>
		<result property="isHide" column="s_is_hide"/>
		<result property="description" column="s_description"/>
		<result property="createTime" column="s_create_time"/>
		<result property="updateTime" column="s_update_time"/>
	</resultMap>

	<resultMap id="resourceMap2" type="com.art1001.supply.entity.resource.ResourceShowVO">
		<id property="id" column="p_id"/>
		<result property="group" column="p_name"/>
		<collection property="resources" ofType="com.art1001.supply.entity.resource.SimpleResource">
			<id property="id" column="s_id"/>
			<result property="resourceName" column="s_name"/>
		</collection>
	</resultMap>

	<!-- 映射子资源 -->
	<resultMap id="resourceAllMap" type="com.art1001.supply.entity.resource.ResourceEntity">
		<id property="id" column="r_id"/>
		<result property="name" column="sname"/>
		<collection property="subResource" ofType="com.art1001.supply.entity.resource.ResourceEntity">
			<id column="s_id" property="id"/>
			<result property="parentId" column="s_parent_id"/>
			<result property="name" column="s_name"/>
			<result property="rsId" column="rs_id"/>
		</collection>
	</resultMap>

	<select id="findResourcesByUserId" parameterType="String" resultMap="resourceMap" flushCache="true" useCache="true">
		SELECT s.* FROM tb_resource s, tb_resources_role sr, tb_role r, tb_role_user ru
		WHERE s.s_id = sr.s_id AND sr.r_id = r.r_id AND r.r_id = ru.r_id AND ru.u_id=${userId}
	</select>
	
	<select id="findResourcesMenuByUserId" parameterType="String" resultMap="resourceMap" flushCache="true" useCache="true">
		SELECT s.* FROM tb_resource s, tb_resources_role sr, tb_role r, tb_role_user ru
		WHERE s.s_id = sr.s_id AND sr.r_id = r.r_id AND r.r_id = ru.r_id AND s.s_type =0 AND ru.u_id=${userId}
	</select>
	
	<select id="queryTreeGridListByPage" parameterType="map" resultMap="resourceMap" flushCache="true" useCache="true">
		<if test="name != null and name != ''">
			<bind name="namePattern" value="'%' + _parameter.get('name') + '%'" />
		</if>
		SELECT t1.s_id,
			t1.s_parent_id,
			t1.s_name,
			t1.s_source_key,
			t1.s_type,
			t1.s_source_url,
			t1.s_level,
			t1.s_is_hide,
			t1.s_description,
			t1.s_create_time,
			t1.s_update_time,
		 CASE WHEN 
		 	(SELECT count(s_id) FROM tb_resource t2 where t2.s_parent_id = t1.s_id)>0 
		 THEN 
		 	FALSE 
		 ELSE 
		 	TRUE 
		 END AS s_isLeaf
		 FROM tb_resource t1
		<where>
			<if test="name != null and name != ''">
				and t1.s_name like #{namePattern}	
			</if>
			<choose>
				<when test="parentId eq null or parentId == ''">and t1.s_parent_id IS null</when>
				<otherwise>and t1.s_parent_id = ${parentId}</otherwise>
			</choose>
		</where>
		order by s_id DESC
	</select>
	
	<select id="queryResourceList" parameterType="map" resultMap="resourceMap" flushCache="true" useCache="true">
		SELECT t1.s_id,
			t1.s_parent_id,
			t1.s_name,
			t2.s_name AS s_parentName,
			t1.s_source_key,
			t1.s_type,
			t1.s_source_url,
			t1.s_level,
			t1.s_is_hide,
			t1.s_description,
			t1.s_create_time,
			t1.s_update_time,
		CASE WHEN t3.s_id IS NULL THEN FALSE ELSE TRUE END AS s_selected
		FROM tb_resource t1 LEFT JOIN tb_resource t2 ON t1.s_parent_id = t2.s_id 
		LEFT JOIN tb_resources_role t3 on t1.s_id = t3.s_id and t3.r_id=${roleId}
		<where>
			<if test="isHide != null">
				and t1.s_is_hide=${isHide}
			</if>
			<if test="type != null">
				and t1.s_type=${type}
			</if>
		</where>
	</select>

	<!-- 根据角色id 查询出该角色的所有资源 -->
	<select id="selectByRoleId" resultType="java.lang.Integer">
		select
		res.s_id
		 from tb_resource res RIGHT JOIN tb_resources_role rl on res.s_id = rl.s_id where rl.r_id = '15'
	</select>

	<!-- 查询出所有资源 (包括子资源) -->
    <select id="allList" resultMap="resourceAllMap">
		SELECT
			parent.r_id,
			parent.sname,
			tr.s_name,
			tr.s_id,
			tr.s_parent_id,
			b.b_s_id as rs_id
		FROM
			( SELECT r.s_id AS r_id, s_parent_id AS parent_id, s_name AS sname FROM tb_resource AS r WHERE s_parent_id = '0' ) AS parent
		LEFT JOIN tb_resource tr ON parent.r_id = tr.s_parent_id
		LEFT JOIN (
		SELECT
			r.s_id AS b_s_id,
			s.s_name
		FROM
			tb_resources_role r
			LEFT JOIN tb_resource s ON r.s_id = s.s_id
		WHERE
			r.r_id = #{roleId}
			) AS b ON b.b_s_id = tr.s_id
	</select>

	<select id="selectAll" resultMap="resourceMap2">
		SELECT
			parent.s_id AS p_id,
			parent.s_name AS p_name,
			sub.s_id AS s_id,
			sub.s_name AS s_name
		FROM
			sys_resources AS parent
			LEFT JOIN sys_resources AS sub ON parent.s_id = sub.s_parent_id
		WHERE parent.s_parent_id = 0
	</select>

	<!-- 获取该角色拥有的所有资源 -->
	<select id="selectRoleHaveResources" resultMap="resourceMap">
		SELECT
			s_id,
			s_name,
			s_parent_id
		FROM
			sys_resources
		WHERE
			s_id in
			<foreach collection="ids" open="(" close=")" separator="," item="id">
				#{id}
			</foreach>
	</select>

	<delete id="deleteRolePerm" parameterType="Long">
		delete from tb_resources_role where s_id = ${id}
	</delete>
	
	
</mapper>