<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.art1001.supply.mapper.project.ProjectMapper">
	
	<resultMap id="BaseResultMap" type="com.art1001.supply.entity.project.Project">
		<result column="project_id" property="projectId" jdbcType="VARCHAR" />
		<result column="project_name" property="projectName" jdbcType="VARCHAR" />
		<result column="member_id" property="memberId" jdbcType="VARCHAR" />
		<result column="start_time" property="startTime" jdbcType="BIGINT" />
		<result column="end_time" property="endTime" jdbcType="BIGINT" />
		<result column="project_cover" property="projectCover" jdbcType="VARCHAR" />
		<result column="project_des" property="projectDes" jdbcType="VARCHAR" />
		<result column="project_del" property="projectDel" jdbcType="INTEGER" />
		<result column="project_status" property="projectStatus" jdbcType="INTEGER" />
		<result column="create_time" property="createTime" jdbcType="BIGINT" />
		<result column="update_time" property="updateTime" jdbcType="BIGINT" />
		<result column="is_public" property="isPublic" jdbcType="INTEGER" />
		<result column="project_remind" property="projectRemind" jdbcType="INTEGER" />
		<!--<collection property="funcList" column="project_id" javaType="ArrayList"-->
					 <!--select="com.art1001.supply.mapper.project.ProjectFuncMapper.findProjectFuncList"/>-->

		<collection property="projectMemberList" column="project_id" javaType="java.util.ArrayList"
					 select="com.art1001.supply.mapper.project.ProjectMemberMapper.findByProjectId"/>

		<collection property="logList" column="project_id" javaType="java.util.ArrayList"
					 select="com.art1001.supply.mapper.log.LogMapper.findLogByProjectId"/>
	</resultMap>

	<resultMap id="ProjectAndTaskByExecutor" type="com.art1001.supply.entity.project.Project" extends="BaseResultMap">
		<result column="project_id" property="projectId" jdbcType="VARCHAR" />
		<collection property="taskList" column="{projectId=project_id,memberId=mid}" 
					javaType="ArrayList" ofType="com.art1001.supply.entity.task.Task" 
					select="com.art1001.supply.mapper.task.TaskMapper.findTaskByProjectAndStatusAndExecutor"/>
	</resultMap>

	<resultMap id="ProjectAndTaskByUser" type="com.art1001.supply.entity.project.Project" extends="BaseResultMap">
		<result column="project_id" property="projectId" jdbcType="VARCHAR" />
		<collection property="taskList" column="{projectId=project_id,memberId=mid}" 
					javaType="ArrayList" ofType="com.art1001.supply.entity.task.Task" 
					select="com.art1001.supply.mapper.task.TaskMapper.findTaskByProjectAndStatusAndUser"/>
	</resultMap>

	<resultMap id="ProjectAndTaskByCreateMember" type="com.art1001.supply.entity.project.Project" extends="BaseResultMap">
		<result column="project_id" property="projectId" jdbcType="VARCHAR" />
		<collection property="taskList" column="{projectId=project_id,memberId=mid}" 
					javaType="ArrayList" ofType="com.art1001.supply.entity.task.Task" 
					select="com.art1001.supply.mapper.task.TaskMapper.findTaskByProjectAndStatusAndCreateMember"/>
	</resultMap>

    <resultMap id="BaseResultMap1" type="com.art1001.supply.entity.project.Project">
		<result column="project_id" property="projectId" jdbcType="VARCHAR" />
		<result column="project_name" property="projectName" jdbcType="VARCHAR" />
		<result column="project_cover" property="projectCover" jdbcType="VARCHAR" />
		<result column="project_des" property="projectDes" jdbcType="VARCHAR" />
		<result column="collect" property="collect" jdbcType="INTEGER" />
		<result column="project_del" property="projectDel" jdbcType="INTEGER" />
		<result column="member_label" property="memberLabel" jdbcType="INTEGER" />
	</resultMap>

	<sql id="Base_Column_List">
		project_id,
		project_name,
		member_id,
		start_time,
		end_time,
		project_cover,
		project_des,
		project_del,
		project_status,
		create_time,
		update_time,
		is_public,
		project_remind,
		func
	</sql>

	<sql id="whereStatement">
		<where>
			1 = 1
			<if test="condition !=null">
			</if>
		</where>
	</sql>
	
	<select id="findProjectPagerList" resultMap="BaseResultMap"
		parameterType="com.art1001.supply.entity.base.Pager">
		
		select <include refid="Base_Column_List" /> from prm_project
		<include refid="whereStatement" />
		
		<if test="orderBy == 0">
			order by project_id desc
		</if>
		<if test="orderBy == 1">
			order by project_id asc
		</if>
		
	</select>
	
	<select id="findProjectAllList" resultMap="BaseResultMap"
		parameterType="com.art1001.supply.entity.project.Project">
		SELECT
		<include refid="Base_Column_List" />
		from prm_project
		<if test="orderBy == 0">
			order by project_id desc
		</if>
		<if test="orderBy == 1">
			order by project_id asc
		</if>
	</select>
	
	<select id="findProjectByProjectId" resultMap="BaseResultMap" parameterType="java.lang.String">

		select
		<include refid="Base_Column_List" />
		from prm_project c where project_id = #{projectId}
        and project_del = 0
	</select>
	
	<delete id="deleteProjectByProjectId" parameterType="java.lang.String">
		delete from
		prm_project where project_id = #{projectId}
	</delete>
	
	<insert id="saveProject" parameterType="com.art1001.supply.entity.project.Project">

		insert into prm_project
		<trim prefix="(" suffix=")" suffixOverrides=",">

			<if test="projectId != null and projectId != ''">
			project_id,
			</if>
			<if test="projectName != null and projectName != ''">
			project_name,
			</if>
			<if test="memberId != null and memberId != ''">
			member_id,
			</if>
			<if test="startTime != null ">
			start_time,
			</if>
			<if test="endTime != null ">
			end_time,
			</if>
			<if test="projectCover != null and projectCover != ''">
			project_cover,
			</if>
			<if test="projectDes != null and projectDes != ''">
			project_des,
			</if>
			<if test="projectDel != null ">
			project_del,
			</if>
			<if test="projectStatus != null ">
			project_status,
			</if>
			<if test="createTime != null ">
			create_time,
			</if>
			<if test="updateTime != null ">
			update_time,
			</if>
			<if test="isPublic != null ">
				is_public,
			</if>
			<if test="projectRemind != null ">
				project_remind,
			</if>
			<if test="func != null ">
				func,
			</if>
		</trim>

		<trim prefix="values (" suffix=")" suffixOverrides=",">

			<if test="projectId != null and projectId != ''">
				#{projectId},
			</if>
			<if test="projectName != null and projectName != ''">
				#{projectName},
			</if>
			<if test="memberId != null and memberId != ''">
				#{memberId},
			</if>
			<if test="startTime != null ">
				#{startTime},
			</if>
			<if test="endTime != null ">
				#{endTime},
			</if>
			<if test="projectCover != null and projectCover != ''">
				#{projectCover},
			</if>
			<if test="projectDes != null and projectDes != ''">
				#{projectDes},
			</if>
			<if test="projectDel != null ">
				#{projectDel},
			</if>
			<if test="projectStatus != null ">
				#{projectStatus},
			</if>
			<if test="createTime != null ">
				#{createTime},
			</if>
			<if test="updateTime != null ">
				#{updateTime},
			</if>

			<if test="isPublic != null ">
				#{isPublic},
			</if>

			<if test="projectRemind != null ">
				#{projectRemind},
			</if>

			<if test="func != null ">
				#{func},
			</if>
		</trim>

	</insert>
	
	<update id="updateProject" parameterType="com.art1001.supply.entity.project.Project">

		update prm_project
		<set>
			<if test="projectId != null and projectId != ''">
				project_id = #{projectId},
			</if>
			<if test="projectName != null and projectName != ''">
				project_name = #{projectName},
			</if>
			<if test="memberId != null and memberId != ''">
				member_id = #{memberId},
			</if>
			<if test="startTime != null ">
				start_time = #{startTime},
			</if>
			<if test="endTime != null ">
				end_time = #{endTime},
			</if>
			<if test="projectCover != null and projectCover != ''">
				project_cover = #{projectCover},
			</if>
			<if test="projectDes != null and projectDes != ''">
				project_des = #{projectDes},
			</if>
			<if test="projectDel != null ">
				project_del = #{projectDel},
			</if>
			<if test="projectStatus != null ">
				project_status = #{projectStatus},
			</if>
			<if test="createTime != null ">
				create_time = #{createTime},
			</if>
			<if test="updateTime != null ">
				update_time = #{updateTime},
			</if>
			<if test="isPublic != null ">
				is_public = #{isPublic},
			</if>

			<if test="projectRemind != null ">
				project_remind = #{projectRemind},
			</if>
		</set>

		WHERE project_id = #{projectId}

	</update>


	<!-- 查询我创建的所有项目/我删除的全部项目 -->
	<select id="findProjectByMemberId" resultMap="BaseResultMap1">
		SELECT
		<include refid="Base_Column_List" />
		from prm_project where project_del = #{projectDel} and member_id = #{memberId}
		order by create_time asc
	</select>


	<!--查询我的个人项目/企业项目-->
	<select id="findProjectByUserId" resultMap="BaseResultMap1">
		select p.project_id,
			p.project_name,
			p.project_cover,
			p.project_des,
			pm.collect as collect,
			p.project_del,
			p.project_status,
			pm.member_label as member_label
		from prm_project p left join prm_project_member pm on p.project_id = pm.project_id
		where pm.member_id = #{userId} and p.organization_id=0 order by pm.create_time asc
	</select>

	<!-- 查询出该用户执行的任务信息和所在项目信息 -->
	<select id="findProjectAndTaskByExecutorId" resultMap="ProjectAndTaskByExecutor">
		select
		<include refid="Base_Column_List"/>
		,#{id} as mid
		from prm_project where project_id in( select project_id from prm_project_member where member_id = #{id})
	</select>

	<!-- 查询出该用户参与的任务信息和所在项目信息 -->
	<select id="findProjectAndTaskByUserId" resultMap="ProjectAndTaskByUser">
		select
		<include refid="Base_Column_List"/>
		,#{id} as mid
		from prm_project where project_id in( select project_id from prm_project_member where member_id = #{id})
	</select>

	<select id="findProjectAndTaskByCreateMember" resultMap="ProjectAndTaskByCreateMember">
		select
		<include refid="Base_Column_List"/>
		,#{id} as mid
		from prm_project where project_id in( select project_id from prm_project_member where member_id = #{id})
	</select>

	<!-- 查询某个用户参与的所有项目信息 -->
	<select id="listProjectByUid" resultMap="BaseResultMap">
		select <include refid="Base_Column_List" />
		from prm_project where project_id in (select project_id from prm_project_member where prm_project_member.member_id = #{uId})
	</select>

	<!-- 查询出用户收藏的所有项目信息 -->
	<select id="listProjectByUserCollect" resultMap="BaseResultMap">
		select <include refid="Base_Column_List"/>
		from prm_project where project_id in (select prm_project_collect.project_id from prm_project_collect where prm_project_collect.member_id = #{uId})
	</select>
	<select id="findOrgProject" resultMap="BaseResultMap1">
		select p.project_id,
			p.project_name,
			p.project_cover,
			p.project_des,
			pm.collect as collect,
			p.project_del
		from prm_project p left join prm_project_member pm on p.project_id = pm.project_id
		where pm.member_id = #{userId} and p.organization_id = #{orgId} order by pm.create_time asc
	</select>

	<!-- 查询出当前项目的默认分组 -->
    <select id="selectDefaultGroup" resultType="java.lang.String">
		select relation_id from prm_relation where project_id = #{projectId} and lable = 0 order by create_time limit 0,1
	</select>


</mapper>


